name: 'build-and-deploy-api'
description: 'Builds API Project for Production and Deploys it to a given WA Slot'

inputs:
  releaseVersion:
    required: true
    description: "Release Version (Commit or Tag)"
  slot:
    required: true
    description: "Slot Identifier"
  mongoUri:
    required: true
    description: "Mongo Connection URI"
  sentryKey:
    required: true
    description: "Sentry DSN Key"
  sentryAuthToken:
    required: true
    description: "Sentry Auth Token"
outputs:
  url:
    description: "API URL"
    value: ${{ steps.wa-deployment.outputs.webapp-url }}

runs:
  using: "composite"
  steps:
    - name: Set environment
      run: envsubst < apps/api/src/.env.template > apps/api/src/.env
      env:
        MONGODB_URI: ${{ inputs.mongoUri }}
        ENVIRONMENT_NAME: ${{ inputs.slot }}
        RELEASE_VERSION: ${{ inputs.releaseVersion }}
        SENTRY_KEY: ${{ inputs.sentryKey }}
      shell: bash
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # TODO: publish latest tag somewhere and pull latest container image here to make use of Docker's caching
    - name: Build app and container
      run: |
        npx nx docker-build api --prod
      shell: bash
    - name: Push container to registry
      run: |
        docker tag api ghcr.io/kordis-leitstelle/kordis/api-${{ inputs.releaseVersion}}
        docker push ghcr.io/kordis-leitstelle/kordis/api-${{ inputs.releaseVersion}}
    # TODO: Replace wa-deployment by deployment to K8s
    - name: Deploy API
      id: wa-deployment
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'kordis-api'
        slot-name: ${{ inputs.slot }}
        package: dist/apps/api/
    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ inputs.sentryAuthToken }}
        SENTRY_ORG: kordis-leitstelle
        SENTRY_PROJECT: kordis-api
      with:
        environment: ${{ inputs.slot }}
        version: ${{ inputs.releaseVersion }}
        sourcemaps: ./dist/apps/api
